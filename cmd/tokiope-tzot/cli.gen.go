// Code generated by cyamli v0.0.14, DO NOT EDIT.
package main

import (
	"fmt"
	"strconv"
	"strings"
)

type Func[Input any] func(subcommand []string, input Input, inputErr error) (err error)

type CLI struct {
	Download CLI_Download

	Tags CLI_Tags

	FUNC Func[CLI_Input]
}

func (CLI) DESC_Simple() string {
	return "tokiope-tzot:\n\nUsage:\n    $ tokiope-tzot\n\nSubcommands:\n    download, tags\n\n"
}
func (CLI) DESC_Detail() string {
	return "tokiope-tzot:\n\nUsage:\n    $ tokiope-tzot\n\n\nSubcommands:\n    download:\n        Downloads data of timezone offset transitions from \"https://github.com/Jumpaku/tz-offset-transitions\".\n\n    tags:\n        Lists tags in \"https://github.com/Jumpaku/tz-offset-transitions\".\n\n"
}

type CLI_Input struct {
}

func resolve_CLI_Input(input *CLI_Input, restArgs []string) error {
	*input = CLI_Input{}

	var arguments []string
	for idx, arg := range restArgs {
		if arg == "--" {
			arguments = append(arguments, restArgs[idx+1:]...)
			break
		}
		if !strings.HasPrefix(arg, "-") {
			arguments = append(arguments, arg)
			continue
		}
		optName, lit, cut := strings.Cut(arg, "=")
		consumeVariables(optName, lit, cut)

		switch optName {
		default:
			return fmt.Errorf("unknown option %q", optName)

		}
	}

	return nil
}

type CLI_Download struct {
	FUNC Func[CLI_Download_Input]
}

func (CLI_Download) DESC_Simple() string {
	return "Downloads data of timezone offset transitions from \"https://github.com/Jumpaku/tz-offset-transitions\".\n\nUsage:\n    $ <program> download [<option>]...\n\nOptions:\n    -out-path, -tag\n\n"
}
func (CLI_Download) DESC_Detail() string {
	return "Downloads data of timezone offset transitions from \"https://github.com/Jumpaku/tz-offset-transitions\".\n\nUsage:\n    $ <program> download [<option>]...\n\n\nOptions:\n    -out-path=<string>  (default=\"\"):\n        Specifies the path where downloaded data is saved. If not specified, stdout is selected.\n\n    -tag=<string>  (default=\"\"):\n        Specifies the version tag of the data. If not specified, the latest tag is selected.\n\n"
}

type CLI_Download_Input struct {
	Opt_OutPath string

	Opt_Tag string
}

func resolve_CLI_Download_Input(input *CLI_Download_Input, restArgs []string) error {
	*input = CLI_Download_Input{

		Opt_OutPath: "",

		Opt_Tag: "",
	}

	var arguments []string
	for idx, arg := range restArgs {
		if arg == "--" {
			arguments = append(arguments, restArgs[idx+1:]...)
			break
		}
		if !strings.HasPrefix(arg, "-") {
			arguments = append(arguments, arg)
			continue
		}
		optName, lit, cut := strings.Cut(arg, "=")
		consumeVariables(optName, lit, cut)

		switch optName {
		default:
			return fmt.Errorf("unknown option %q", optName)

		case "-out-path":
			if !cut {
				return fmt.Errorf("value is not specified to option %q", optName)

			}
			if err := parseValue(&input.Opt_OutPath, lit); err != nil {
				return fmt.Errorf("value %q is not assignable to option %q", lit, optName)
			}

		case "-tag":
			if !cut {
				return fmt.Errorf("value is not specified to option %q", optName)

			}
			if err := parseValue(&input.Opt_Tag, lit); err != nil {
				return fmt.Errorf("value %q is not assignable to option %q", lit, optName)
			}

		}
	}

	return nil
}

type CLI_Tags struct {
	FUNC Func[CLI_Tags_Input]
}

func (CLI_Tags) DESC_Simple() string {
	return "Lists tags in \"https://github.com/Jumpaku/tz-offset-transitions\".\n\nUsage:\n    $ <program> tags\n\n"
}
func (CLI_Tags) DESC_Detail() string {
	return "Lists tags in \"https://github.com/Jumpaku/tz-offset-transitions\".\n\nUsage:\n    $ <program> tags\n\n"
}

type CLI_Tags_Input struct {
}

func resolve_CLI_Tags_Input(input *CLI_Tags_Input, restArgs []string) error {
	*input = CLI_Tags_Input{}

	var arguments []string
	for idx, arg := range restArgs {
		if arg == "--" {
			arguments = append(arguments, restArgs[idx+1:]...)
			break
		}
		if !strings.HasPrefix(arg, "-") {
			arguments = append(arguments, arg)
			continue
		}
		optName, lit, cut := strings.Cut(arg, "=")
		consumeVariables(optName, lit, cut)

		switch optName {
		default:
			return fmt.Errorf("unknown option %q", optName)

		}
	}

	return nil
}

func NewCLI() CLI {
	return CLI{}
}

func Run(cli CLI, args []string) error {
	subcommandPath, restArgs := resolveSubcommand(args)
	switch strings.Join(subcommandPath, " ") {

	case "":
		funcMethod := cli.FUNC
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.FUNC not assigned", "")
		}
		var input CLI_Input
		err := resolve_CLI_Input(&input, restArgs)
		return funcMethod(subcommandPath, input, err)

	case "download":
		funcMethod := cli.Download.FUNC
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.Download.FUNC not assigned", "download")
		}
		var input CLI_Download_Input
		err := resolve_CLI_Download_Input(&input, restArgs)
		return funcMethod(subcommandPath, input, err)

	case "tags":
		funcMethod := cli.Tags.FUNC
		if funcMethod == nil {
			return fmt.Errorf("%q is unsupported: cli.Tags.FUNC not assigned", "tags")
		}
		var input CLI_Tags_Input
		err := resolve_CLI_Tags_Input(&input, restArgs)
		return funcMethod(subcommandPath, input, err)

	}
	return nil
}

func resolveSubcommand(args []string) (subcommandPath []string, restArgs []string) {
	if len(args) == 0 {
		panic("command line arguments are too few")
	}
	subcommandSet := map[string]bool{
		"":         true,
		"download": true, "tags": true,
	}

	for _, arg := range args[1:] {
		if arg == "--" {
			break
		}
		pathLiteral := strings.Join(append(append([]string{}, subcommandPath...), arg), " ")
		if !subcommandSet[pathLiteral] {
			break
		}
		subcommandPath = append(subcommandPath, arg)
	}

	return subcommandPath, args[1+len(subcommandPath):]
}

func parseValue(dstPtr any, strValue ...string) error {
	switch dstPtr := dstPtr.(type) {
	case *[]bool:
		val := make([]bool, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []bool: %w", str, err)
			}
		}
		*dstPtr = val
	case *[]float64:
		val := make([]float64, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []float64: %w", str, err)
			}
		}
		*dstPtr = val
	case *[]int64:
		val := make([]int64, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []int64: %w", str, err)
			}
		}
		*dstPtr = val
	case *[]string:
		val := make([]string, len(strValue))
		for idx, str := range strValue {
			if err := parseValue(&val[idx], str); err != nil {
				return fmt.Errorf("fail to parse %#v as []string: %w", str, err)
			}
		}
		*dstPtr = val
	case *bool:
		val, err := strconv.ParseBool(strValue[0])
		if err != nil {
			return fmt.Errorf("fail to parse %q as bool: %w", strValue[0], err)
		}
		*dstPtr = val
	case *float64:
		val, err := strconv.ParseFloat(strValue[0], 64)
		if err != nil {
			return fmt.Errorf("fail to parse %q as float64: %w", strValue[0], err)
		}
		*dstPtr = val
	case *int64:
		val, err := strconv.ParseInt(strValue[0], 0, 64)
		if err != nil {
			return fmt.Errorf("fail to parse %q as int64: %w", strValue[0], err)
		}
		*dstPtr = val
	case *string:
		*dstPtr = strValue[0]
	}

	return nil
}

func consumeVariables(...any) {}
